{"ast":null,"code":"/**\n *\n *\n * @author Jerry Bendy <jerry@icewingcc.com>\n * @licence MIT\n *\n */\n(function (self) {\n  'use strict';\n\n  if (self.URLSearchParams && new self.URLSearchParams({\n    a: 1\n  }).toString() === 'a=1') {\n    return;\n  }\n\n  var __URLSearchParams__ = \"__URLSearchParams__\",\n      prototype = URLSearchParams.prototype,\n      iterable = !!(self.Symbol && self.Symbol.iterator);\n  /**\n   * Make a URLSearchParams instance\n   *\n   * @param {object|string|URLSearchParams} search\n   * @constructor\n   */\n\n  function URLSearchParams(search) {\n    search = search || \"\";\n    this[__URLSearchParams__] = {}; // support construct object with another URLSearchParams instance\n\n    if (search instanceof URLSearchParams) {\n      search = search.toString();\n    }\n\n    if (typeof search === \"object\") {\n      for (var i in search) {\n        if (search.hasOwnProperty(i)) {\n          var str = typeof search[i] === 'string' ? search[i] : JSON.stringify(search[i]);\n          this.append(i, str);\n        }\n      }\n    } else {\n      // remove first '?'\n      if (search.indexOf(\"?\") === 0) {\n        search = search.slice(1);\n      }\n\n      var pairs = search.split(\"&\");\n\n      for (var j = 0; j < pairs.length; j++) {\n        var value = pairs[j],\n            index = value.indexOf('=');\n\n        if (-1 < index) {\n          this.append(decode(value.slice(0, index)), decode(value.slice(index + 1)));\n        }\n      }\n    }\n  }\n  /**\n   * Appends a specified key/value pair as a new search parameter.\n   *\n   * @param {string} name\n   * @param {string} value\n   */\n\n\n  prototype.append = function (name, value) {\n    var dict = this[__URLSearchParams__];\n\n    if (name in dict) {\n      dict[name].push('' + value);\n    } else {\n      dict[name] = ['' + value];\n    }\n  };\n  /**\n   * Deletes the given search parameter, and its associated value,\n   * from the list of all search parameters.\n   *\n   * @param {string} name\n   */\n\n\n  prototype.delete = function (name) {\n    delete this[__URLSearchParams__][name];\n  };\n  /**\n   * Returns the first value associated to the given search parameter.\n   *\n   * @param {string} name\n   * @returns {string|null}\n   */\n\n\n  prototype.get = function (name) {\n    var dict = this[__URLSearchParams__];\n    return name in dict ? dict[name][0] : null;\n  };\n  /**\n   * Returns all the values association with a given search parameter.\n   *\n   * @param {string} name\n   * @returns {Array}\n   */\n\n\n  prototype.getAll = function (name) {\n    var dict = this[__URLSearchParams__];\n    return name in dict ? dict[name].slice(0) : [];\n  };\n  /**\n   * Returns a Boolean indicating if such a search parameter exists.\n   *\n   * @param {string} name\n   * @returns {boolean}\n   */\n\n\n  prototype.has = function (name) {\n    return name in this[__URLSearchParams__];\n  };\n  /**\n   * Sets the value associated to a given search parameter to\n   * the given value. If there were several values, delete the\n   * others.\n   *\n   * @param {string} name\n   * @param {string} value\n   */\n\n\n  prototype.set = function set(name, value) {\n    this[__URLSearchParams__][name] = ['' + value];\n  };\n  /**\n   *\n   *\n   * @param {function} callback\n   * @param {object} thisArg\n   */\n\n\n  prototype.forEach = function (callback, thisArg) {\n    var dict = this[__URLSearchParams__];\n    Object.getOwnPropertyNames(dict).forEach(function (name) {\n      dict[name].forEach(function (value) {\n        callback.call(thisArg, value, name, this);\n      }, this);\n    }, this);\n  };\n  /**\n   * Returns a string containg a query string suitable for use in a URL.\n   *\n   * @returns {string}\n   */\n\n\n  prototype.toString = function () {\n    var dict = this[__URLSearchParams__],\n        query = [],\n        i,\n        key,\n        name,\n        value;\n\n    for (key in dict) {\n      name = encode(key);\n\n      for (i = 0, value = dict[key]; i < value.length; i++) {\n        query.push(name + '=' + encode(value[i]));\n      }\n    }\n\n    return query.join('&');\n  };\n  /**\n   * Sort all name-value pairs\n   */\n\n\n  prototype.sort = function () {\n    var dict = this[__URLSearchParams__],\n        keys = [],\n        k,\n        i,\n        ret = {};\n\n    for (k in dict) {\n      keys.push(k);\n    }\n\n    keys.sort();\n\n    for (i = 0; i < keys.length; i++) {\n      ret[keys[i]] = dict[keys[i]];\n    }\n\n    this[__URLSearchParams__] = ret;\n  };\n  /**\n   * Returns an iterator allowing to go through all keys of\n   * the key/value pairs contained in this object.\n   *\n   * @returns {function}\n   */\n\n\n  prototype.keys = function () {\n    var items = [];\n    this.forEach(function (item, name) {\n      items.push([name]);\n    });\n    return makeIterator(items);\n  };\n  /**\n   * Returns an iterator allowing to go through all values of\n   * the key/value pairs contained in this object.\n   *\n   * @returns {function}\n   */\n\n\n  prototype.values = function () {\n    var items = [];\n    this.forEach(function (item) {\n      items.push([item]);\n    });\n    return makeIterator(items);\n  };\n  /**\n   * Returns an iterator allowing to go through all key/value\n   * pairs contained in this object.\n   *\n   * @returns {function}\n   */\n\n\n  prototype.entries = function () {\n    var items = [];\n    this.forEach(function (item, name) {\n      items.push([name, item]);\n    });\n    return makeIterator(items);\n  };\n\n  if (iterable) {\n    prototype[self.Symbol.iterator] = prototype.entries;\n  }\n\n  function encode(str) {\n    var replace = {\n      '!': '%21',\n      \"'\": '%27',\n      '(': '%28',\n      ')': '%29',\n      '~': '%7E',\n      '%20': '+',\n      '%00': '\\x00'\n    };\n    return encodeURIComponent(str).replace(/[!'\\(\\)~]|%20|%00/g, function (match) {\n      return replace[match];\n    });\n  }\n\n  function decode(str) {\n    return decodeURIComponent(str.replace(/\\+/g, ' '));\n  }\n\n  function makeIterator(arr) {\n    var iterator = {\n      next: function next() {\n        var value = arr.shift();\n        return {\n          done: value === undefined,\n          value: value\n        };\n      }\n    };\n\n    if (iterable) {\n      iterator[self.Symbol.iterator] = function () {\n        return iterator;\n      };\n    }\n\n    return iterator;\n  }\n\n  self.URLSearchParams = URLSearchParams;\n  self.URLSearchParams.polyfill = true;\n})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);","map":null,"metadata":{},"sourceType":"script"}