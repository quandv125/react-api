{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nvar ProgressBar = function (_React$Component) {\n  _inherits(ProgressBar, _React$Component);\n\n  function ProgressBar(props) {\n    _classCallCheck(this, ProgressBar);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this.state = {\n      percent: 100\n    };\n    _this.intervalId = null;\n    return _this;\n  }\n\n  ProgressBar.prototype.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    var distance = 100 / (this.props.duration / 10);\n    this.intervalId = setInterval(function () {\n      var percent = _this2.state.percent - distance;\n\n      _this2.setState({\n        percent: percent > 0 ? percent : 0\n      });\n    }, 10);\n  };\n\n  ProgressBar.prototype.componentDidUpdate = function componentDidUpdate() {\n    if (this.state.percent <= 0 && this.intervalId) {\n      clearTimeout(this.intervalId);\n    }\n  };\n\n  ProgressBar.prototype.componentWillUnmount = function componentWillUnmount() {\n    if (this.intervalId) {\n      clearTimeout(this.intervalId);\n    }\n  };\n\n  ProgressBar.prototype.render = function render() {\n    var percent = this.state.percent;\n    return _react2.default.createElement('div', {\n      className: 'rrt-progress-container'\n    }, _react2.default.createElement('div', {\n      className: 'rrt-progressbar',\n      style: {\n        width: percent + '%'\n      }\n    }));\n  };\n\n  return ProgressBar;\n}(_react2.default.Component);\n\nProgressBar.displayName = 'ProgressBar';\nProgressBar.propTypes = {\n  duration: _propTypes2.default.number.isRequired\n};\nexports.default = ProgressBar;","map":null,"metadata":{},"sourceType":"script"}