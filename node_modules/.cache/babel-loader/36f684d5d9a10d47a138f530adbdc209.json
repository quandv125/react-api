{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _ProgressBar = require('./ProgressBar');\n\nvar _ProgressBar2 = _interopRequireDefault(_ProgressBar);\n\nvar _Icon = require('./Icon');\n\nvar _Icon2 = _interopRequireDefault(_Icon);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n} //  eslint-disable-line no-unused-vars\n\n\nvar ToastrBox = function (_React$Component) {\n  _inherits(ToastrBox, _React$Component);\n\n  function ToastrBox(props) {\n    _classCallCheck(this, ToastrBox);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this.handlePressEnterOrSpaceKeyToastr = function (e) {\n      if (e.key === ' ' || e.key === 'enter') {\n        _this.handleClickToastr(e);\n      }\n    };\n\n    _this.handleClickToastr = function () {\n      var _this$props$item$opti = _this.props.item.options,\n          onToastrClick = _this$props$item$opti.onToastrClick,\n          closeOnToastrClick = _this$props$item$opti.closeOnToastrClick;\n      _this.ignoreIsHiding = true;\n\n      if (onToastrClick) {\n        onToastrClick();\n      }\n\n      if (closeOnToastrClick) {\n        _this._setShouldClose(true);\n\n        _this._removeToastr();\n      }\n    };\n\n    _this.handleClickCloseButton = function (e) {\n      var onCloseButtonClick = _this.props.item.options.onCloseButtonClick;\n      e.stopPropagation();\n      _this.ignoreIsHiding = true;\n\n      if (onCloseButtonClick) {\n        onCloseButtonClick();\n      }\n\n      _this._setShouldClose(true);\n\n      _this._removeToastr();\n    };\n\n    _this.mouseEnter = function () {\n      clearTimeout(_this.intervalId);\n\n      _this._setIntervalId(null);\n\n      _this._setIsHiding(false);\n\n      var progressBar = _this.props.item.options.progressBar;\n\n      var timeOut = _this._getItemTimeOut();\n\n      if (timeOut && progressBar) {\n        _this.setState({\n          progressBar: null\n        });\n      }\n    };\n\n    _this.mouseLeave = function () {\n      var _this$props$item$opti2 = _this.props.item.options,\n          removeOnHover = _this$props$item$opti2.removeOnHover,\n          removeOnHoverTimeOut = _this$props$item$opti2.removeOnHoverTimeOut;\n\n      if (!_this.isHiding && (removeOnHover || _this.shouldClose)) {\n        var interval = removeOnHover === true ? removeOnHoverTimeOut || 1000 : removeOnHover;\n\n        _this._setIntervalId(setTimeout(_this._removeToastr, interval));\n\n        var progressBar = _this.props.item.options.progressBar;\n\n        var timeOut = _this._getItemTimeOut();\n\n        if (timeOut && progressBar) {\n          _this.setState({\n            progressBar: {\n              duration: interval\n            }\n          });\n        }\n      }\n    };\n\n    var _props$item$options = props.item.options,\n        transitionIn = _props$item$options.transitionIn,\n        transitionOut = _props$item$options.transitionOut;\n    _this.isHiding = false;\n    _this.shouldClose = false;\n    _this.intervalId = null;\n    _this.ignoreIsHiding = false;\n    _this.transitionIn = transitionIn || _this.props.transitionIn;\n    _this.transitionOut = transitionOut || _this.props.transitionOut;\n    _this.state = {\n      progressBar: null\n    };\n    (0, _utils._bind)(['renderSubComponent', 'renderIcon', 'renderToastr', 'renderCloseButton', 'renderMessage', '_onAnimationComplete', '_removeToastr', '_setTransition', '_clearTransition', '_setIntervalId', '_setIsHiding', '_setShouldClose'], _this);\n    return _this;\n  }\n\n  ToastrBox.prototype.componentDidMount = function componentDidMount() {\n    var item = this.props.item;\n    if (this.props.inMemory[item.id]) return;\n\n    var timeOut = this._getItemTimeOut();\n\n    if (timeOut) {\n      this._setIntervalId(setTimeout(this._removeToastr, timeOut));\n    }\n\n    if (timeOut && item.options.progressBar) {\n      this.setState({\n        progressBar: {\n          duration: this._getItemTimeOut()\n        }\n      });\n    }\n\n    this._setTransition();\n\n    (0, _utils.onCSSTransitionEnd)(this.toastrBoxElement, this._onAnimationComplete);\n    this.props.addToMemory(item.id);\n  };\n\n  ToastrBox.prototype.componentWillUnmount = function componentWillUnmount() {\n    if (this.intervalId) {\n      clearTimeout(this.intervalId);\n    }\n  };\n\n  ToastrBox.prototype.handlePressEnterOrSpaceKeyCloseButton = function handlePressEnterOrSpaceKeyCloseButton(e) {\n    if (e.key === ' ' || e.key === 'enter') {\n      this.handleClickCloseButton(e);\n    }\n  };\n\n  ToastrBox.prototype.renderSubComponent = function renderSubComponent() {\n    var _this2 = this;\n\n    var _props$item = this.props.item,\n        id = _props$item.id,\n        options = _props$item.options;\n\n    var removeCurrentToastrFunc = function removeCurrentToastrFunc() {\n      return _this2.props.remove(id);\n    };\n\n    if ((0, _react.isValidElement)(options.component)) {\n      return _react2.default.cloneElement(options.component, {\n        remove: removeCurrentToastrFunc\n      });\n    }\n\n    return _react2.default.createElement(options.component, {\n      remove: removeCurrentToastrFunc\n    });\n  };\n\n  ToastrBox.prototype.renderIcon = function renderIcon() {\n    var _props$item2 = this.props.item,\n        type = _props$item2.type,\n        options = _props$item2.options;\n\n    if ((0, _react.isValidElement)(options.icon)) {\n      return _react2.default.cloneElement(options.icon);\n    }\n\n    var iconName = type === 'light' ? options.icon : type;\n    return _react2.default.createElement(_Icon2.default, {\n      name: iconName\n    });\n  };\n\n  ToastrBox.prototype.renderCloseButton = function renderCloseButton() {\n    return _react2.default.createElement('button', {\n      type: 'button',\n      className: 'close-toastr',\n      onClick: this.handleClickCloseButton\n    }, \"\\u2715\");\n  };\n\n  ToastrBox.prototype.renderToastr = function renderToastr() {\n    var _props$item3 = this.props.item,\n        type = _props$item3.type,\n        options = _props$item3.options,\n        message = _props$item3.message,\n        title = _props$item3.title;\n    return _react2.default.createElement('div', null, _react2.default.createElement('div', {\n      className: 'rrt-left-container'\n    }, _react2.default.createElement('div', {\n      className: 'rrt-holder'\n    }, this.renderIcon())), options.status && type === 'light' && _react2.default.createElement('div', {\n      className: (0, _classnames2.default)('toastr-status', options.status)\n    }), _react2.default.createElement('div', {\n      className: 'rrt-middle-container'\n    }, title && _react2.default.createElement('div', {\n      className: 'rrt-title'\n    }, title), message && _react2.default.createElement('div', {\n      className: 'rrt-text'\n    }, message), options.component && this.renderSubComponent()), _react2.default.createElement('div', {\n      className: 'rrt-right-container'\n    }, options.showCloseButton && this.renderCloseButton()), this.state.progressBar ? _react2.default.createElement(_ProgressBar2.default, this.state.progressBar) : null);\n  };\n\n  ToastrBox.prototype.renderMessage = function renderMessage() {\n    var _props$item4 = this.props.item,\n        title = _props$item4.title,\n        message = _props$item4.message,\n        options = _props$item4.options;\n    return _react2.default.createElement('div', null, _react2.default.createElement('div', {\n      className: 'rrt-title'\n    }, title, this.renderCloseButton()), _react2.default.createElement('div', {\n      className: 'rrt-text'\n    }, message, options.component && this.renderSubComponent()));\n  };\n\n  ToastrBox.prototype.toastr = function toastr() {\n    if (this.props.item.type === 'message') {\n      return this.renderMessage();\n    }\n\n    return this.renderToastr();\n  };\n\n  ToastrBox.prototype._getItemTimeOut = function _getItemTimeOut() {\n    var item = this.props.item;\n    var timeOut = item.options.timeOut;\n\n    if (typeof timeOut === 'undefined') {\n      timeOut = this.props.timeOut;\n    }\n\n    return timeOut;\n  };\n\n  ToastrBox.prototype._onAnimationComplete = function _onAnimationComplete() {\n    var _props = this.props,\n        remove = _props.remove,\n        item = _props.item;\n    var options = item.options,\n        id = item.id;\n\n    if (this.isHiding || this.ignoreIsHiding) {\n      this._setIsHiding(false);\n\n      this.ignoreIsHiding = false;\n      remove(id);\n\n      if (options.onHideComplete) {\n        options.onHideComplete();\n      }\n    } else if (!this.isHiding && options.onShowComplete) {\n      options.onShowComplete();\n    }\n  };\n\n  ToastrBox.prototype._removeToastr = function _removeToastr() {\n    if (!this.isHiding) {\n      this._setIsHiding(true);\n\n      this._setTransition(true);\n\n      (0, _utils.onCSSTransitionEnd)(this.toastrBoxElement, this._onAnimationComplete);\n    }\n  };\n\n  ToastrBox.prototype._setTransition = function _setTransition(hide) {\n    var _this3 = this;\n\n    var animationType = hide ? this.transitionOut : this.transitionIn;\n\n    var onEndListener = function onEndListener(e) {\n      if (e && e.target == _this3.toastrBoxElement) {\n        _this3.toastrBoxElement.classList.remove(animationType);\n      }\n    };\n\n    (0, _utils.onCSSTransitionEnd)(this.toastrBoxElement, onEndListener);\n    this.toastrBoxElement.classList.add(animationType);\n  };\n\n  ToastrBox.prototype._clearTransition = function _clearTransition() {\n    this.toastrBoxElement.classList.remove(this.transitionIn, this.transitionOut);\n  };\n\n  ToastrBox.prototype._setIntervalId = function _setIntervalId(intervalId) {\n    this.intervalId = intervalId;\n  };\n\n  ToastrBox.prototype._setIsHiding = function _setIsHiding(val) {\n    this.isHiding = val;\n  };\n\n  ToastrBox.prototype._setShouldClose = function _setShouldClose(val) {\n    this.shouldClose = val;\n  };\n\n  ToastrBox.prototype.render = function render() {\n    var _this4 = this;\n\n    var _props$item5 = this.props.item,\n        options = _props$item5.options,\n        type = _props$item5.type;\n    var onToastrClick = options.onToastrClick,\n        closeOnToastrClick = options.closeOnToastrClick;\n    var hasOnToastrClick = !!onToastrClick;\n    var doesCloseOnToastrClick = closeOnToastrClick;\n    var toastrClickAttributes = {};\n\n    if (hasOnToastrClick || doesCloseOnToastrClick) {\n      toastrClickAttributes.role = 'button';\n      toastrClickAttributes.tabIndex = 0;\n      toastrClickAttributes.onClick = this.handleClickToastr;\n      toastrClickAttributes.onKeyPress = this.handlePressEnterOrSpaceKeyToastr;\n    }\n\n    return _react2.default.createElement('div', _extends({\n      ref: function ref(_ref) {\n        return _this4.toastrBoxElement = _ref;\n      },\n      className: (0, _classnames2.default)('toastr', 'animated', 'rrt-' + type, options.className),\n      onMouseEnter: this.mouseEnter,\n      onMouseLeave: this.mouseLeave\n    }, toastrClickAttributes), this.toastr());\n  };\n\n  return ToastrBox;\n}(_react2.default.Component);\n\nToastrBox.displayName = 'ToastrBox';\nToastrBox.propTypes = {\n  item: _propTypes2.default.shape({\n    options: _propTypes2.default.shape({\n      transitionIn: _propTypes2.default.string,\n      transitionOut: _propTypes2.default.string\n    })\n  })\n};\nexports.default = ToastrBox;","map":null,"metadata":{},"sourceType":"script"}