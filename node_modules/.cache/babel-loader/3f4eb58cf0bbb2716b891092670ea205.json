{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n/* eslint no-underscore-dangle: 0 */\n\n\nvar _utils = require('../utils');\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _sort = require('./sort');\n\nvar _rows = require('./rows');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Store = function () {\n  function Store(keyField) {\n    _classCallCheck(this, Store);\n\n    this._data = [];\n    this._filteredData = [];\n    this._keyField = keyField;\n    this._sortOrder = undefined;\n    this._sortField = undefined;\n    this._selected = [];\n    this._filters = {};\n    this._page = undefined;\n    this._sizePerPage = undefined;\n  }\n\n  _createClass(Store, [{\n    key: 'edit',\n    value: function edit(rowId, dataField, newValue) {\n      var row = (0, _rows.getRowByRowId)(this)(rowId);\n      if (row) _utils2.default.set(row, dataField, newValue);\n    }\n  }, {\n    key: 'setSort',\n    value: function setSort(_ref, order, defaultOrder) {\n      var dataField = _ref.dataField;\n      this.sortOrder = (0, _sort.nextOrder)(this)(dataField, order, defaultOrder);\n      this.sortField = dataField;\n    }\n  }, {\n    key: 'sortBy',\n    value: function sortBy(_ref2) {\n      var sortFunc = _ref2.sortFunc;\n      this.data = (0, _sort.sort)(this)(sortFunc);\n    }\n  }, {\n    key: 'getAllData',\n    value: function getAllData() {\n      return this._data;\n    }\n  }, {\n    key: 'setAllData',\n    value: function setAllData(data) {\n      this._data = data;\n    }\n  }, {\n    key: 'data',\n    get: function get() {\n      if (Object.keys(this._filters).length > 0) {\n        return this._filteredData;\n      }\n\n      return this._data;\n    },\n    set: function set(data) {\n      if (Object.keys(this._filters).length > 0) {\n        this._filteredData = data;\n      } else {\n        this._data = data ? JSON.parse(JSON.stringify(data)) : [];\n      }\n    }\n  }, {\n    key: 'filteredData',\n    get: function get() {\n      return this._filteredData;\n    },\n    set: function set(filteredData) {\n      this._filteredData = filteredData;\n    }\n  }, {\n    key: 'keyField',\n    get: function get() {\n      return this._keyField;\n    },\n    set: function set(keyField) {\n      this._keyField = keyField;\n    }\n  }, {\n    key: 'sortOrder',\n    get: function get() {\n      return this._sortOrder;\n    },\n    set: function set(sortOrder) {\n      this._sortOrder = sortOrder;\n    }\n  }, {\n    key: 'page',\n    get: function get() {\n      return this._page;\n    },\n    set: function set(page) {\n      this._page = page;\n    }\n  }, {\n    key: 'sizePerPage',\n    get: function get() {\n      return this._sizePerPage;\n    },\n    set: function set(sizePerPage) {\n      this._sizePerPage = sizePerPage;\n    }\n  }, {\n    key: 'sortField',\n    get: function get() {\n      return this._sortField;\n    },\n    set: function set(sortField) {\n      this._sortField = sortField;\n    }\n  }, {\n    key: 'selected',\n    get: function get() {\n      return this._selected;\n    },\n    set: function set(selected) {\n      this._selected = selected;\n    }\n  }, {\n    key: 'filters',\n    get: function get() {\n      return this._filters;\n    },\n    set: function set(filters) {\n      this._filters = filters;\n    }\n  }]);\n\n  return Store;\n}();\n\nexports.default = Store;","map":null,"metadata":{},"sourceType":"script"}