{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DataTableContainer = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactRedux = require('react-redux');\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _csvExport = require('./csvExport');\n\nvar _DataTable = require('./DataTable');\n\nvar _DataTable2 = _interopRequireDefault(_DataTable);\n\nvar _DataTable3 = require('./DataTable.actions');\n\nvar _LoadingGif = require('./LoadingGif/LoadingGif');\n\nvar _LoadingGif2 = _interopRequireDefault(_LoadingGif);\n\nvar _localStorage = require('./localStorage');\n\nvar _ColumnFilters = require('./ColumnFilters');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar DataTableContainer = exports.DataTableContainer = function (_React$Component) {\n  _inherits(DataTableContainer, _React$Component);\n\n  function DataTableContainer(props) {\n    _classCallCheck(this, DataTableContainer);\n\n    var _this = _possibleConstructorReturn(this, (DataTableContainer.__proto__ || Object.getPrototypeOf(DataTableContainer)).call(this, props));\n\n    _this.onTableChange = function (type, _ref) {\n      var _ref$page = _ref.page,\n          page = _ref$page === undefined ? 1 : _ref$page,\n          _ref$sizePerPage = _ref.sizePerPage,\n          sizePerPage = _ref$sizePerPage === undefined ? 10 : _ref$sizePerPage,\n          filters = _ref.filters,\n          sortField = _ref.sortField,\n          sortOrder = _ref.sortOrder;\n      if (!_this.isSetup || _this.state.clearingFilters) return;\n      var filterValues = (0, _ColumnFilters.getFilterValues)(_this.tableColumns, filters);\n      _this.columnFilters = (0, _ColumnFilters.generateColumnFilters)(_this.tableColumns, filterValues);\n\n      if (_this.props.tableSettings.useLocalStorage) {\n        (0, _localStorage.updateLocalStorageItem)('tableFilters', _defineProperty({}, _this.props.tableSettings.tableID, (0, _ColumnFilters.setStorageFilters)(_this.tableColumns, filterValues)));\n      }\n\n      _this.getTableData({\n        sizePerPage: sizePerPage,\n        page: page,\n        sortField: sortField,\n        sortOrder: sortOrder\n      });\n\n      _this.setState({\n        sizePerPage: sizePerPage,\n        currentPage: page,\n        sortField: sortField,\n        sortOrder: sortOrder,\n        lastRefresh: Date.now()\n      });\n    };\n\n    _this.onSearchChange = function (e) {\n      var text = e.target.value.trim();\n\n      if (_this.props.tableSettings.useLocalStorage) {\n        (0, _localStorage.updateLocalStorageItem)('tableSearch', _defineProperty({}, _this.props.tableSettings.tableID, text));\n      }\n\n      _this.searchValue = text;\n\n      _this.getTableData({});\n    };\n\n    _this.onSizePerPageChange = function (sizePerPage) {\n      _this.setState({\n        sizePerPage: sizePerPage\n      });\n    };\n\n    _this.onExportToCSV = function () {\n      if ((0, _csvExport.canUseDOM)()) {\n        (0, _DataTable3.fetchExportData)(_this.props.tableSettings, _this.state.sortField, _this.state.sortOrder, _this.searchValue, _this.columnFilters, _this.props.apiLocation).then(function (data) {\n          var fields = Object.values(_this.tableColumns).filter(function (filter) {\n            return filter.column.export !== false;\n          }).map(function (tableColumn) {\n            return tableColumn.column.key;\n          });\n          (0, _csvExport.exportToCSVFile)(fields, data, 'exportDownload_' + (0, _moment2.default)().format('YYYY-MM-DD_HH-mm') + '.csv');\n        });\n      }\n    };\n\n    _this.getTableData = function (_ref2) {\n      var _ref2$sizePerPage = _ref2.sizePerPage,\n          sizePerPage = _ref2$sizePerPage === undefined ? _this.state.sizePerPage : _ref2$sizePerPage,\n          _ref2$page = _ref2.page,\n          page = _ref2$page === undefined ? 1 : _ref2$page,\n          _ref2$sortField = _ref2.sortField,\n          sortField = _ref2$sortField === undefined ? _this.state.sortField : _ref2$sortField,\n          _ref2$sortOrder = _ref2.sortOrder,\n          sortOrder = _ref2$sortOrder === undefined ? _this.state.sortOrder : _ref2$sortOrder;\n\n      _this.props.dispatch((0, _DataTable3.fetchTableData)(_this.props.tableSettings, sizePerPage, (page - 1) * sizePerPage, sortField, sortOrder, _this.searchValue, _this.columnFilters, _this.props.apiLocation));\n    };\n\n    _this.setupTable = function () {\n      var tableColumns = _this.props.tableSettings.tableColumns;\n      _this.tableColumns = (0, _ColumnFilters.setupTableColumns)(tableColumns);\n\n      if (_this.props.tableSettings.useLocalStorage) {\n        // set table search\n        var previousTableSearch = (0, _localStorage.getLocalStorageItem)('tableSearch');\n\n        if (previousTableSearch && previousTableSearch[_this.props.tableSettings.tableID]) {\n          _this.searchValue = previousTableSearch[_this.props.tableSettings.tableID];\n        } // set table filters\n\n\n        var previousTableFilters = (0, _localStorage.getLocalStorageItem)('tableFilters');\n\n        if (previousTableFilters && previousTableFilters[_this.props.tableSettings.tableID]) {\n          (0, _ColumnFilters.setDefaultFilters)(_this.tableColumns, previousTableFilters[_this.props.tableSettings.tableID]);\n        }\n      }\n    };\n\n    _this.initiateTable = function () {\n      var filterValues = (0, _ColumnFilters.getDefaultFilterValues)(_this.tableColumns);\n      _this.columnFilters = (0, _ColumnFilters.generateColumnFilters)(_this.tableColumns, filterValues);\n\n      _this.getTableData({\n        page: _this.state.currentPage\n      });\n    };\n\n    _this.refreshTable = function () {\n      _this.getTableData({\n        page: _this.state.currentPage\n      });\n\n      _this.setState({\n        lastRefresh: Date.now()\n      });\n    };\n\n    _this.startClearingFilters = function () {\n      _this.setState({\n        clearingFilters: true\n      });\n    };\n\n    _this.clearFilters = function () {\n      if (_this.props.tableSettings.useLocalStorage) {\n        var previousTableFilters = (0, _localStorage.getLocalStorageItem)('tableFilters');\n\n        if (previousTableFilters) {\n          var newTableFilters = _extends({}, previousTableFilters);\n\n          delete newTableFilters[_this.props.tableSettings.tableID];\n          (0, _localStorage.setLocalStorageItem)('tableFilters', newTableFilters);\n        }\n      }\n\n      _this.columnFilters = undefined;\n\n      _this.getTableData({});\n\n      _this.setState({\n        currentPage: 1,\n        clearingFilters: false\n      });\n    };\n\n    _this.makeFullscreen = function () {\n      _this.setState({\n        isFullscreen: !_this.state.isFullscreen\n      });\n    };\n\n    _this.state = {\n      isFullscreen: false,\n      sizePerPage: 10,\n      currentPage: 1,\n      sortField: undefined,\n      sortOrder: undefined,\n      clearingFilters: false,\n      lastRefresh: 0\n    };\n    _this.isSetup = false;\n    _this.searchValue = '' + (_this.props.tableSettings.defaultSearch ? _this.props.tableSettings.defaultSearch : '');\n    _this.columnFilters = undefined;\n\n    _this.setupTable();\n\n    _this.initiateTable();\n\n    return _this;\n  }\n\n  _createClass(DataTableContainer, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (typeof this.props.ownProps.setRef !== 'undefined') {\n        this.props.ownProps.setRef(this);\n      }\n\n      this.isSetup = true;\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (typeof this.props.ownProps.setRef !== 'undefined') {\n        this.props.ownProps.setRef(null);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          tableSettings = _props.tableSettings,\n          DataTableData = _props.DataTableData;\n      var minWidth = tableSettings.minWidth;\n      var tableID = tableSettings.tableID;\n\n      if (!tableID || DataTableData && DataTableData[tableID] && DataTableData[tableID].error) {\n        return _react2.default.createElement('div', {\n          className: 'status_message offline'\n        }, _react2.default.createElement('p', null, 'The table failed to initialise. Please check you are connected to the internet and try again.'));\n      }\n\n      var isLoading = false;\n      if (!DataTableData || !DataTableData[tableID] || !DataTableData[tableID].fetched) isLoading = true;\n      var isFiltered = false;\n\n      if (this.columnFilters && this.columnFilters.length > 0) {\n        isFiltered = true;\n      }\n\n      var tableData = null;\n\n      if (DataTableData && DataTableData[tableID] && DataTableData[tableID].data) {\n        tableData = DataTableData[tableID].data;\n      }\n\n      var tableDataSize = 0;\n\n      if (DataTableData && DataTableData[tableID] && DataTableData[tableID].dataTotalSize) {\n        tableDataSize = DataTableData[tableID].dataTotalSize;\n      }\n\n      if (!tableSettings.extraToolbarItems) tableSettings.extraToolbarItems = null;\n      return _react2.default.createElement('div', {\n        className: '\\n                  ' + tableSettings.wrapperType + '\\n                  ' + (this.state.isFullscreen ? 'section-isFullscreen' : '') + '\\n                  react-datatable\\n              '\n      }, tableSettings.displayTitle && _react2.default.createElement('div', {\n        className: 'section-toolbar'\n      }, _react2.default.createElement('span', {\n        className: 'section-toolbar-title'\n      }, tableSettings.displayTitle), tableSettings.extraToolbarItems && tableSettings.extraToolbarItems(), _react2.default.createElement('div', {\n        className: 'section-toolbar-group'\n      }, _react2.default.createElement('div', {\n        className: '\\n                              section-toolbar-icon\\n                              section-toolbar-fullscreen\\n                              ' + (this.state.isFullscreen ? 'section-toolbar-isFullscreen' : '') + '\\n                          ',\n        title: 'Toggle Fullscreen',\n        onClick: this.makeFullscreen\n      }, 'Fullscreen'))), _react2.default.createElement('div', {\n        className: 'inner',\n        style: {\n          overflow: 'auto'\n        }\n      }, _react2.default.createElement('div', {\n        style: {\n          minWidth: minWidth\n        }\n      }, isLoading && _react2.default.createElement('div', {\n        className: 'loadingContainer',\n        style: {\n          opacity: 0.3\n        }\n      }, _react2.default.createElement(_LoadingGif2.default, null)), _react2.default.createElement(_DataTable2.default, {\n        keyField: tableSettings.keyField,\n        noDataIndication: tableSettings.noDataIndication,\n        extraButtons: tableSettings.extraButtons,\n        defaultSort: tableSettings.defaultSort,\n        tableColumns: this.tableColumns,\n        tableData: tableData,\n        dataTotalSize: tableDataSize,\n        onTableChange: this.onTableChange,\n        onSizePerPageChange: this.onSizePerPageChange,\n        onSearchChange: this.onSearchChange,\n        onExportToCSV: this.onExportToCSV,\n        currentPage: this.state.currentPage,\n        sizePerPage: this.state.sizePerPage,\n        refreshTable: this.refreshTable,\n        searchValue: this.searchValue,\n        isFiltered: isFiltered,\n        startClearingFilters: this.startClearingFilters,\n        clearFilters: this.clearFilters\n      }))));\n    }\n  }]);\n\n  return DataTableContainer;\n}(_react2.default.Component);\n\nDataTableContainer.propTypes = {\n  dispatch: _propTypes2.default.func.isRequired,\n  tableSettings: _propTypes2.default.object.isRequired,\n  apiLocation: _propTypes2.default.string.isRequired,\n  DataTableData: _propTypes2.default.any,\n  ownProps: _propTypes2.default.func\n};\nDataTableContainer.defaultProps = {\n  DataTableData: null,\n  ownProps: function ownProps() {}\n};\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    DataTableData: state.DataTableReducer.DataTableData,\n    ownProps: ownProps\n  };\n};\n\nexports.default = (0, _reactRedux.connect)(mapStateToProps)(DataTableContainer);","map":null,"metadata":{},"sourceType":"script"}