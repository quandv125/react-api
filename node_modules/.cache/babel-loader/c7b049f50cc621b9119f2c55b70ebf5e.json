{"ast":null,"code":"import * as Types from './../constants/ActionType'; // const initialState = user ? { loggedIn: true, user } : { loggedIn: false };\n\nvar initialState = {\n  loggedIn: sessionStorage.getItem('authentication') ? true : false,\n  loggedOut: false\n};\n\nvar authentication = function authentication() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case Types.LOGIN:\n      if (action.user && action.user.status) {\n        sessionStorage.setItem('authentication', JSON.stringify(action.user));\n        state = {\n          loggedIn: action.user.status,\n          loggedOut: false,\n          user: JSON.parse(sessionStorage.getItem('authentication'))\n        }; // state = { loggedIn: action.user.status, loggedOut: false };\n      }\n\n      return state;\n\n    case Types.LOGOUT:\n      sessionStorage.removeItem('authentication');\n      state = {\n        loggedIn: false,\n        loggedOut: true,\n        user: null\n      };\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default authentication;","map":{"version":3,"sources":["/Volumes/Data/React/react-api/src/reducers/authentication.js"],"names":["Types","initialState","loggedIn","sessionStorage","getItem","loggedOut","authentication","state","action","type","LOGIN","user","status","setItem","JSON","stringify","parse","LOGOUT","removeItem"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,2BAAvB,C,CAEA;;AACA,IAAMC,YAAY,GAAG;AAAEC,EAAAA,QAAQ,EAAEC,cAAc,CAACC,OAAf,CAAuB,gBAAvB,IAA2C,IAA3C,GAAkD,KAA9D;AAAqEC,EAAAA,SAAS,EAAE;AAAhF,CAArB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;;AACrD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,KAAK,CAACU,KAAX;AACI,UAAGF,MAAM,CAACG,IAAP,IAAeH,MAAM,CAACG,IAAP,CAAYC,MAA9B,EAAqC;AACjCT,QAAAA,cAAc,CAACU,OAAf,CAAuB,gBAAvB,EAAyCC,IAAI,CAACC,SAAL,CAAeP,MAAM,CAACG,IAAtB,CAAzC;AACAJ,QAAAA,KAAK,GAAG;AAAEL,UAAAA,QAAQ,EAAEM,MAAM,CAACG,IAAP,CAAYC,MAAxB;AAAgCP,UAAAA,SAAS,EAAE,KAA3C;AAAkDM,UAAAA,IAAI,EAAEG,IAAI,CAACE,KAAL,CAAWb,cAAc,CAACC,OAAf,CAAuB,gBAAvB,CAAX;AAAxD,SAAR,CAFiC,CAGjC;AAEH;;AACD,aAAOG,KAAP;;AACJ,SAAKP,KAAK,CAACiB,MAAX;AACId,MAAAA,cAAc,CAACe,UAAf,CAA0B,gBAA1B;AACAX,MAAAA,KAAK,GAAG;AAAEL,QAAAA,QAAQ,EAAE,KAAZ;AAAmBG,QAAAA,SAAS,EAAE,IAA9B;AAAoCM,QAAAA,IAAI,EAAE;AAA1C,OAAR;AACA,aAAOJ,KAAP;;AACJ;AACI,aAAOA,KAAP;AAdR;AAgBH,CAjBD;;AAmBA,eAAeD,cAAf","sourcesContent":["import * as Types from './../constants/ActionType';\n\n// const initialState = user ? { loggedIn: true, user } : { loggedIn: false };\nconst initialState = { loggedIn: sessionStorage.getItem('authentication') ? true : false, loggedOut: false };\n\nconst authentication = (state = initialState, action) => {\n    switch(action.type){\n        case Types.LOGIN:\n            if(action.user && action.user.status){\n                sessionStorage.setItem('authentication', JSON.stringify(action.user));\n                state = { loggedIn: action.user.status, loggedOut: false, user: JSON.parse(sessionStorage.getItem('authentication')) };\n                // state = { loggedIn: action.user.status, loggedOut: false };\n\n            }\n            return state;\n        case Types.LOGOUT:\n            sessionStorage.removeItem('authentication');\n            state = { loggedIn: false, loggedOut: true, user: null };\n            return state;\n        default: \n            return state;\n    }\n}\n\nexport default authentication;"]},"metadata":{},"sourceType":"module"}