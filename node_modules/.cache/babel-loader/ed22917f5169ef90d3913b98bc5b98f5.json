{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReduxToastr = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactRedux = require('react-redux');\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _ToastrBox = require('./ToastrBox');\n\nvar _ToastrBox2 = _interopRequireDefault(_ToastrBox);\n\nvar _ToastrConfirm = require('./ToastrConfirm');\n\nvar _ToastrConfirm2 = _interopRequireDefault(_ToastrConfirm);\n\nvar _actions = require('./actions');\n\nvar actions = _interopRequireWildcard(_actions);\n\nvar _toastrEmitter = require('./toastrEmitter');\n\nvar _utils = require('./utils');\n\nvar _constants = require('./constants');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nvar ReduxToastr = exports.ReduxToastr = function (_React$Component) {\n  _inherits(ReduxToastr, _React$Component);\n\n  function ReduxToastr(props) {\n    _classCallCheck(this, ReduxToastr);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this.toastrFired = {};\n    _this.toastrPositions = ['top-left', 'top-right', 'top-center', 'bottom-left', 'bottom-right', 'bottom-center'];\n    (0, _utils.updateConfig)(props);\n    return _this;\n  }\n\n  ReduxToastr.prototype.componentDidMount = function componentDidMount() {\n    var _props = this.props,\n        add = _props.add,\n        showConfirm = _props.showConfirm,\n        clean = _props.clean,\n        removeByType = _props.removeByType,\n        remove = _props.remove;\n\n    _toastrEmitter.EE.on('toastr/confirm', showConfirm);\n\n    _toastrEmitter.EE.on('add/toastr', add);\n\n    _toastrEmitter.EE.on('clean/toastr', clean);\n\n    _toastrEmitter.EE.on('removeByType/toastr', removeByType);\n\n    _toastrEmitter.EE.on('remove/toastr', remove);\n  };\n\n  ReduxToastr.prototype.componentWillUnmount = function componentWillUnmount() {\n    _toastrEmitter.EE.removeListener('toastr/confirm');\n\n    _toastrEmitter.EE.removeListener('add/toastr');\n\n    _toastrEmitter.EE.removeListener('clean/toastr');\n\n    _toastrEmitter.EE.removeListener('removeByType/toastr');\n\n    _toastrEmitter.EE.removeListener('remove/toastr');\n\n    this.toastrFired = {};\n  };\n\n  ReduxToastr.prototype._addToMemory = function _addToMemory(id) {\n    this.toastrFired[id] = true;\n  };\n\n  ReduxToastr.prototype._renderToastrForPosition = function _renderToastrForPosition(position) {\n    var _this2 = this;\n\n    var toastrs = this.props.toastr.toastrs;\n\n    if (toastrs) {\n      return toastrs.filter(function (item) {\n        return item.position === position;\n      }).map(function (item) {\n        var mergedItem = _extends({}, item, {\n          options: _extends({\n            progressBar: _this2.props.progressBar,\n            transitionIn: _this2.props.transitionIn,\n            transitionOut: _this2.props.transitionOut,\n            closeOnToastrClick: _this2.props.closeOnToastrClick\n          }, item.options)\n        });\n\n        return _react2.default.createElement('span', {\n          key: item.id\n        }, _react2.default.createElement(_ToastrBox2.default, _extends({\n          inMemory: _this2.toastrFired,\n          addToMemory: function addToMemory() {\n            return _this2._addToMemory(item.id);\n          },\n          item: mergedItem\n        }, _this2.props)), item.options && item.options.attention && _react2.default.createElement('div', {\n          onClick: function onClick() {\n            if (typeof item.options.onAttentionClick === 'function') {\n              item.options.onAttentionClick(item.id);\n            } else {\n              _this2.props.remove(item.id);\n            }\n          },\n          className: 'toastr-attention'\n        }));\n      });\n    }\n  };\n\n  ReduxToastr.prototype._renderToastrs = function _renderToastrs() {\n    var _this3 = this;\n\n    var toastr = this.props.toastr;\n    var width = toastr.toastrs && toastr.toastrs[0] && toastr.toastrs[0].options && toastr.toastrs[0].options.width;\n    var style = width ? {\n      width: width\n    } : {};\n    return _react2.default.createElement('span', null, this.toastrPositions.map(function (position) {\n      return _react2.default.createElement('div', {\n        key: position,\n        className: position,\n        style: style\n      }, _this3._renderToastrForPosition(position));\n    }));\n  };\n\n  ReduxToastr.prototype.render = function render() {\n    var _props2 = this.props,\n        className = _props2.className,\n        toastr = _props2.toastr;\n    return _react2.default.createElement('span', {\n      className: (0, _classnames2.default)('redux-toastr', className),\n      'aria-live': 'assertive'\n    }, toastr.confirm && _react2.default.createElement(_ToastrConfirm2.default, _extends({\n      confirm: toastr.confirm\n    }, this.props)), this._renderToastrs());\n  };\n\n  return ReduxToastr;\n}(_react2.default.Component);\n\nReduxToastr.displayName = 'ReduxToastr';\nReduxToastr.propTypes = {\n  toastr: _propTypes2.default.object,\n  position: _propTypes2.default.string,\n  newestOnTop: _propTypes2.default.bool,\n  timeOut: _propTypes2.default.number,\n  confirmOptions: _propTypes2.default.object,\n  progressBar: _propTypes2.default.bool,\n  transitionIn: _propTypes2.default.oneOf(_constants.TRANSITIONS.in),\n  transitionOut: _propTypes2.default.oneOf(_constants.TRANSITIONS.out),\n  preventDuplicates: _propTypes2.default.bool,\n  closeOnToastrClick: _propTypes2.default.bool\n};\nReduxToastr.defaultProps = {\n  position: 'top-right',\n  newestOnTop: true,\n  timeOut: 5000,\n  progressBar: false,\n  transitionIn: _constants.TRANSITIONS.in[0],\n  transitionOut: _constants.TRANSITIONS.out[0],\n  preventDuplicates: false,\n  closeOnToastrClick: false,\n  confirmOptions: {\n    okText: 'ok',\n    cancelText: 'cancel'\n  }\n};\nexports.default = (0, _reactRedux.connect)(function (state) {\n  return {\n    toastr: state.toastr ? state.toastr : state.get('toastr')\n  };\n}, actions)(ReduxToastr);","map":null,"metadata":{},"sourceType":"script"}