{"ast":null,"code":"import * as Types from './../constants/ActionType';\nimport { findIndex } from 'lodash';\nvar initialState = {\n  status: null,\n  users: null\n};\n\nvar users = function users() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case Types.FETCH_USERS:\n      if (action.users.status) {\n        state = {\n          status: action.users.status,\n          users: action.users.data\n        };\n      }\n\n      return state;\n\n    case Types.DELETE_USERS:\n      var index = findIndex(state.users, {\n        id: action.id\n      });\n\n      if (index !== -1) {\n        state.users.splice(index, 1);\n      }\n\n      state = {\n        status: false,\n        users: state.users\n      };\n      return state;\n\n    case Types.ADD_USERS:\n      state = {\n        status: action.user.status,\n        users: action.user,\n        preUser: !action.user.status ? action.userOld : null\n      };\n      return state;\n\n    case Types.UPDATE_USERS:\n      var id = action.user.user.id;\n      index = findIndex(state.users, {\n        id: id\n      });\n\n      if (index !== -1) {\n        state.users[index] = action.user.user;\n      }\n\n      state = {\n        status: action.user.status,\n        users: action.user\n      };\n      return state;\n\n    case Types.GET_USER:\n      if (action.user) {\n        state = {\n          userEdit: action.user\n        };\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default users;","map":{"version":3,"sources":["/Volumes/Data/React/react-api/src/reducers/users.js"],"names":["Types","findIndex","initialState","status","users","state","action","type","FETCH_USERS","data","DELETE_USERS","index","id","splice","ADD_USERS","user","preUser","userOld","UPDATE_USERS","GET_USER","userEdit"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,2BAAvB;AACA,SAAQC,SAAR,QAAwB,QAAxB;AACA,IAAIC,YAAY,GAAG;AAAEC,EAAAA,MAAM,EAAE,IAAV;AAAgBC,EAAAA,KAAK,EAAE;AAAvB,CAAnB;;AAEA,IAAMA,KAAK,GAAG,SAARA,KAAQ,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AAE5C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKP,KAAK,CAACQ,WAAX;AACI,UAAIF,MAAM,CAACF,KAAP,CAAaD,MAAjB,EAAwB;AACpBE,QAAAA,KAAK,GAAG;AACJF,UAAAA,MAAM,EAAEG,MAAM,CAACF,KAAP,CAAaD,MADjB;AAEJC,UAAAA,KAAK,EAAEE,MAAM,CAACF,KAAP,CAAaK;AAFhB,SAAR;AAIH;;AACD,aAAOJ,KAAP;;AACJ,SAAKL,KAAK,CAACU,YAAX;AACI,UAAIC,KAAK,GAAGV,SAAS,CAACI,KAAK,CAACD,KAAP,EAAc;AAAEQ,QAAAA,EAAE,EAAEN,MAAM,CAACM;AAAb,OAAd,CAArB;;AACA,UAAID,KAAK,KAAK,CAAC,CAAf,EAAkB;AAC1BN,QAAAA,KAAK,CAACD,KAAN,CAAYS,MAAZ,CAAmBF,KAAnB,EAA0B,CAA1B;AACS;;AACDN,MAAAA,KAAK,GAAG;AACJF,QAAAA,MAAM,EAAE,KADJ;AAEJC,QAAAA,KAAK,EAAEC,KAAK,CAACD;AAFT,OAAR;AAIA,aAAOC,KAAP;;AACJ,SAAKL,KAAK,CAACc,SAAX;AAEIT,MAAAA,KAAK,GAAG;AACJF,QAAAA,MAAM,EAAEG,MAAM,CAACS,IAAP,CAAYZ,MADhB;AAEJC,QAAAA,KAAK,EAAEE,MAAM,CAACS,IAFV;AAGJC,QAAAA,OAAO,EAAE,CAACV,MAAM,CAACS,IAAP,CAAYZ,MAAb,GAAsBG,MAAM,CAACW,OAA7B,GAAuC;AAH5C,OAAR;AAKA,aAAOZ,KAAP;;AACJ,SAAKL,KAAK,CAACkB,YAAX;AAAA,UAESN,EAFT,GAEeN,MAAM,CAACS,IAAP,CAAYA,IAF3B,CAESH,EAFT;AAGID,MAAAA,KAAK,GAAGV,SAAS,CAACI,KAAK,CAACD,KAAP,EAAc;AAAEQ,QAAAA,EAAE,EAAEA;AAAN,OAAd,CAAjB;;AACA,UAAID,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdN,QAAAA,KAAK,CAACD,KAAN,CAAYO,KAAZ,IAAqBL,MAAM,CAACS,IAAP,CAAYA,IAAjC;AACH;;AACDV,MAAAA,KAAK,GAAG;AACJF,QAAAA,MAAM,EAAEG,MAAM,CAACS,IAAP,CAAYZ,MADhB;AAEJC,QAAAA,KAAK,EAAEE,MAAM,CAACS;AAFV,OAAR;AAIA,aAAOV,KAAP;;AACJ,SAAKL,KAAK,CAACmB,QAAX;AACI,UAAIb,MAAM,CAACS,IAAX,EAAgB;AACZV,QAAAA,KAAK,GAAG;AACJe,UAAAA,QAAQ,EAAEd,MAAM,CAACS;AADb,SAAR;AAGH;;AACD,aAAOV,KAAP;;AACJ;AACI,aAAOA,KAAP;AA/CR;AAiDH,CAnDD;;AAqDA,eAAeD,KAAf","sourcesContent":["import * as Types from './../constants/ActionType';\nimport {findIndex} from 'lodash';\nvar initialState = { status: null, users: null };\n\nconst users = (state = initialState, action) => {\n   \n    switch(action.type){\n        case Types.FETCH_USERS:\n            if (action.users.status){\n                state = {\n                    status: action.users.status, \n                    users: action.users.data\n                }\n            }\n            return state;\n        case Types.DELETE_USERS:\n            var index = findIndex(state.users, { id: action.id });\n            if (index !== -1) {\n\t\t\t\tstate.users.splice(index, 1);\n            }\n            state = {\n                status: false,\n                users: state.users\n            }\n            return state;\n        case Types.ADD_USERS: \n            \n            state = { \n                status: action.user.status, \n                users: action.user,\n                preUser: !action.user.status ? action.userOld : null\n            };\n            return state;\n        case Types.UPDATE_USERS:\n \n            let {id} = action.user.user; \n            index = findIndex(state.users, { id: id });\n            if (index !== -1) {\n                state.users[index] = action.user.user;\n            }\n            state = {\n                status: action.user.status,\n                users: action.user\n            }\n            return state;\n        case Types.GET_USER: \n            if (action.user){\n                state = {\n                    userEdit: action.user\n                }\n            }\n            return state;\n        default: \n            return state;\n    }\n}\n\nexport default users;"]},"metadata":{},"sourceType":"module"}