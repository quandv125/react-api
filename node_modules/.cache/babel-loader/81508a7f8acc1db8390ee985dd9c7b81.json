{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _const = require('../const');\n\nvar _const2 = _interopRequireDefault(_const);\n\nvar _selection = require('../store/selection');\n\nvar _rows = require('../store/rows');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint no-param-reassign: 0 */\n\n\nexports.default = function (Base) {\n  var _class, _temp;\n\n  return _temp = _class = function (_Component) {\n    _inherits(RowSelectionWrapper, _Component);\n\n    function RowSelectionWrapper(props) {\n      _classCallCheck(this, RowSelectionWrapper);\n\n      var _this = _possibleConstructorReturn(this, (RowSelectionWrapper.__proto__ || Object.getPrototypeOf(RowSelectionWrapper)).call(this, props));\n\n      _this.handleRowSelect = _this.handleRowSelect.bind(_this);\n      _this.handleAllRowsSelect = _this.handleAllRowsSelect.bind(_this);\n      props.store.selected = props.selectRow.selected || [];\n      _this.state = {\n        selectedRowKeys: props.store.selected\n      };\n      return _this;\n    }\n\n    _createClass(RowSelectionWrapper, [{\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        nextProps.store.selected = nextProps.selectRow.selected || [];\n        this.setState(function () {\n          return {\n            selectedRowKeys: nextProps.store.selected\n          };\n        });\n      }\n      /**\n       * row selection handler\n       * @param {String} rowKey - row key of what was selected.\n       * @param {Boolean} checked - next checked status of input button.\n       */\n\n    }, {\n      key: 'handleRowSelect',\n      value: function handleRowSelect(rowKey, checked, rowIndex, e) {\n        var _props = this.props,\n            _props$selectRow = _props.selectRow,\n            mode = _props$selectRow.mode,\n            onSelect = _props$selectRow.onSelect,\n            store = _props.store;\n        var ROW_SELECT_SINGLE = _const2.default.ROW_SELECT_SINGLE;\n        var currSelected = [].concat(_toConsumableArray(store.selected));\n\n        if (mode === ROW_SELECT_SINGLE) {\n          // when select mode is radio\n          currSelected = [rowKey];\n        } else if (checked) {\n          // when select mode is checkbox\n          currSelected.push(rowKey);\n        } else {\n          currSelected = currSelected.filter(function (value) {\n            return value !== rowKey;\n          });\n        }\n\n        store.selected = currSelected;\n\n        if (onSelect) {\n          var row = (0, _rows.getRowByRowId)(store)(rowKey);\n          onSelect(row, checked, rowIndex, e);\n        }\n\n        this.setState(function () {\n          return {\n            selectedRowKeys: currSelected\n          };\n        });\n      }\n      /**\n       * handle all rows selection on header cell by store.selected\n       */\n\n    }, {\n      key: 'handleAllRowsSelect',\n      value: function handleAllRowsSelect(e) {\n        var _props2 = this.props,\n            store = _props2.store,\n            _props2$selectRow = _props2.selectRow,\n            onSelectAll = _props2$selectRow.onSelectAll,\n            nonSelectable = _props2$selectRow.nonSelectable;\n        var selected = (0, _selection.isAnySelectedRow)(store)(nonSelectable);\n        var result = !selected;\n        var currSelected = result ? (0, _selection.selectableKeys)(store)(nonSelectable) : (0, _selection.unSelectableKeys)(store)(nonSelectable);\n        store.selected = currSelected;\n\n        if (onSelectAll) {\n          onSelectAll(result, (0, _selection.getSelectedRows)(store), e);\n        }\n\n        this.setState(function () {\n          return {\n            selectedRowKeys: currSelected\n          };\n        });\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        return _react2.default.createElement(Base, _extends({}, this.props, {\n          onRowSelect: this.handleRowSelect,\n          onAllRowsSelect: this.handleAllRowsSelect\n        }));\n      }\n    }]);\n\n    return RowSelectionWrapper;\n  }(_react.Component), _class.propTypes = {\n    store: _propTypes2.default.object.isRequired,\n    selectRow: _propTypes2.default.object.isRequired\n  }, _temp;\n};","map":null,"metadata":{},"sourceType":"script"}