{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ColumnFilter2 = require('./ColumnFilter');\n\nvar _ColumnFilter3 = _interopRequireDefault(_ColumnFilter2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * Select Filter\n *\n * A class providing supporting operations to a select\n * filter, extending the column filter base class.\n */\n\n\nvar SelectFilter = function (_ColumnFilter) {\n  _inherits(SelectFilter, _ColumnFilter);\n  /**\n   * Constructor\n   *\n   * Call the parent construct and set the default filter type.\n   */\n\n\n  function SelectFilter(column) {\n    _classCallCheck(this, SelectFilter);\n\n    var _this = _possibleConstructorReturn(this, (SelectFilter.__proto__ || Object.getPrototypeOf(SelectFilter)).call(this, column));\n\n    _this.getColumnFilterProps = function (defaultValue) {\n      return {\n        type: _this.column.filter,\n        options: _this.column.filterOptions,\n        defaultValue: defaultValue\n      };\n    };\n\n    _this.type = 'eq';\n    return _this;\n  }\n  /**\n   * Get the column filter properties for displaying\n   *\n   * @param {mixed} defaultValue The default value of the column filter.\n   * @return {Object} React-bootstrap-table column filter properties.\n   */\n\n\n  return SelectFilter;\n}(_ColumnFilter3.default);\n\nexports.default = SelectFilter;","map":null,"metadata":{},"sourceType":"script"}