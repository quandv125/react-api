{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _columnResolver = require('./column-resolver');\n\nvar _columnResolver2 = _interopRequireDefault(_columnResolver);\n\nvar _const = require('../const');\n\nvar _const2 = _interopRequireDefault(_const);\n\nvar _utils = require('../utils');\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nexports.default = function (ExtendBase) {\n  return function (_ColumnResolver) {\n    _inherits(TableResolver, _ColumnResolver);\n\n    function TableResolver() {\n      _classCallCheck(this, TableResolver);\n\n      return _possibleConstructorReturn(this, (TableResolver.__proto__ || Object.getPrototypeOf(TableResolver)).apply(this, arguments));\n    }\n\n    _createClass(TableResolver, [{\n      key: 'validateProps',\n      value: function validateProps() {\n        var keyField = this.props.keyField;\n\n        if (!keyField) {\n          throw new Error('Please specify a field as key via keyField');\n        }\n\n        if (this.visibleColumnSize(false) <= 0) {\n          throw new Error('No visible columns detected');\n        }\n      }\n    }, {\n      key: 'isEmpty',\n      value: function isEmpty() {\n        return this.props.data.length === 0;\n      }\n      /**\n       * props resolver for cell selection\n       * @param {Object} options - addtional options like callback which are about to merge into props\n       *\n       * @returns {Object} result - props for cell selections\n       * @returns {String} result.mode - input type of row selection or disabled.\n       */\n\n    }, {\n      key: 'resolveSelectRowProps',\n      value: function resolveSelectRowProps(options) {\n        var selectRow = this.props.selectRow;\n        var ROW_SELECT_DISABLED = _const2.default.ROW_SELECT_DISABLED;\n\n        if (_utils2.default.isDefined(selectRow)) {\n          return _extends({}, selectRow, options);\n        }\n\n        return {\n          mode: ROW_SELECT_DISABLED\n        };\n      }\n      /**\n       * props resolver for header cell selection\n       * @param {Object} options - addtional options like callback which are about to merge into props\n       *\n       * @returns {Object} result - props for cell selections\n       * @returns {String} result.mode - input type of row selection or disabled.\n       * @returns {String} result.checkedStatus - checkbox status depending on selected rows counts\n       */\n\n    }, {\n      key: 'resolveSelectRowPropsForHeader',\n      value: function resolveSelectRowPropsForHeader() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var selectRow = this.props.selectRow;\n\n        var allRowsSelected = options.allRowsSelected,\n            _options$selected = options.selected,\n            selected = _options$selected === undefined ? [] : _options$selected,\n            rest = _objectWithoutProperties(options, ['allRowsSelected', 'selected']);\n\n        var ROW_SELECT_DISABLED = _const2.default.ROW_SELECT_DISABLED,\n            CHECKBOX_STATUS_CHECKED = _const2.default.CHECKBOX_STATUS_CHECKED,\n            CHECKBOX_STATUS_INDETERMINATE = _const2.default.CHECKBOX_STATUS_INDETERMINATE,\n            CHECKBOX_STATUS_UNCHECKED = _const2.default.CHECKBOX_STATUS_UNCHECKED;\n\n        if (_utils2.default.isDefined(selectRow)) {\n          var checkedStatus = void 0; // checkbox status depending on selected rows counts\n\n          if (allRowsSelected) checkedStatus = CHECKBOX_STATUS_CHECKED;else if (selected.length === 0) checkedStatus = CHECKBOX_STATUS_UNCHECKED;else checkedStatus = CHECKBOX_STATUS_INDETERMINATE;\n          return _extends({}, selectRow, rest, {\n            checkedStatus: checkedStatus\n          });\n        }\n\n        return {\n          mode: ROW_SELECT_DISABLED\n        };\n      }\n    }]);\n\n    return TableResolver;\n  }((0, _columnResolver2.default)(ExtendBase));\n};","map":null,"metadata":{},"sourceType":"script"}