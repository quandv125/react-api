{"ast":null,"code":"'use strict';\n\nfunction Queue(options) {\n  if (!(this instanceof Queue)) {\n    return new Queue(options);\n  }\n\n  options = options || {};\n  this.concurrency = options.concurrency || Infinity;\n  this.pending = 0;\n  this.jobs = [];\n  this.cbs = [];\n  this._done = done.bind(this);\n}\n\nvar arrayAddMethods = ['push', 'unshift', 'splice'];\narrayAddMethods.forEach(function (method) {\n  Queue.prototype[method] = function () {\n    var methodResult = Array.prototype[method].apply(this.jobs, arguments);\n\n    this._run();\n\n    return methodResult;\n  };\n});\nObject.defineProperty(Queue.prototype, 'length', {\n  get: function get() {\n    return this.pending + this.jobs.length;\n  }\n});\n\nQueue.prototype._run = function () {\n  if (this.pending === this.concurrency) {\n    return;\n  }\n\n  if (this.jobs.length) {\n    var job = this.jobs.shift();\n    this.pending++;\n    job(this._done);\n\n    this._run();\n  }\n\n  if (this.pending === 0) {\n    while (this.cbs.length !== 0) {\n      var cb = this.cbs.pop();\n      process.nextTick(cb);\n    }\n  }\n};\n\nQueue.prototype.onDone = function (cb) {\n  if (typeof cb === 'function') {\n    this.cbs.push(cb);\n\n    this._run();\n  }\n};\n\nfunction done() {\n  this.pending--;\n\n  this._run();\n}\n\nmodule.exports = Queue;","map":null,"metadata":{},"sourceType":"script"}