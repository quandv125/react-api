{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fetchTableData = exports.fetchExportData = undefined;\n\nvar _axios = require('axios');\n\nvar _axios2 = _interopRequireDefault(_axios);\n\nrequire('url-search-params-polyfill');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar instance = _axios2.default.create();\n\ninstance.defaults.timeout = 60000;\n\nvar dispatchError = function dispatchError(dispatch, tableSettings, error) {\n  return dispatch({\n    type: 'FETCH_TABLE_DATA_REJECTED',\n    payload: {\n      tableId: tableSettings.tableID,\n      tableData: _defineProperty({}, tableSettings.tableID, {\n        fetching: false,\n        fetched: false,\n        error: error,\n        data: null,\n        dataTotalSize: 0\n      })\n    }\n  });\n};\n\nvar prepareFetchTableParams = function prepareFetchTableParams(tableSettings, limit, offset, sortName, sortOrder, searchValue, columnFilters) {\n  var params = new URLSearchParams();\n  params.append('tableSettings', JSON.stringify(tableSettings));\n  params.append('limit', limit);\n  params.append('offset', offset);\n  if (typeof sortName !== 'undefined') params.append('sortName', sortName);\n  if (typeof sortOrder !== 'undefined') params.append('sortOrder', sortOrder);\n  if (typeof searchValue !== 'undefined') params.append('searchValue', searchValue);\n  if (typeof columnFilters !== 'undefined') params.append('columnFilters', JSON.stringify(columnFilters));\n  return params;\n};\n\nvar fetchExportData = exports.fetchExportData = function fetchExportData(tableSettings, sortName, sortOrder, searchValue, columnFilters, apiLocation) {\n  var params = prepareFetchTableParams(tableSettings, 1000, 0, sortName, sortOrder, searchValue, columnFilters);\n  return instance.post(apiLocation, params, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'\n    }\n  }).then(function (response) {\n    if (response.data.searchSuccess) {\n      return response.data.data;\n    }\n\n    return 'error';\n  }).catch(function () {\n    return 'error';\n  });\n};\n\nvar fetchTableData = exports.fetchTableData = function fetchTableData(tableSettings, limit, offset, sortName, sortOrder, searchValue, columnFilters, apiLocation) {\n  return function (dispatch) {\n    dispatch({\n      type: 'FETCH_TABLE_DATA',\n      payload: {\n        tableId: tableSettings.tableID,\n        tableData: _defineProperty({}, tableSettings.tableID, {\n          fetching: true,\n          fetched: false,\n          error: null,\n          data: null,\n          dataTotalSize: null\n        })\n      }\n    });\n    var params = prepareFetchTableParams(tableSettings, limit, offset, sortName, sortOrder, searchValue, columnFilters);\n    instance.post(apiLocation, params, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'\n      }\n    }).then(function (response) {\n      if (response.data.searchSuccess) {\n        dispatch({\n          type: 'FETCH_TABLE_DATA_FULFILLED',\n          payload: {\n            tableId: tableSettings.tableID,\n            tableData: _defineProperty({}, tableSettings.tableID, {\n              fetching: false,\n              fetched: true,\n              error: null,\n              data: response.data.data,\n              dataTotalSize: response.data.dataTotalSize\n            })\n          }\n        });\n      } else {\n        dispatchError(dispatch, tableSettings, response);\n      }\n    }).catch(function (error) {\n      dispatchError(dispatch, tableSettings, error);\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"script"}