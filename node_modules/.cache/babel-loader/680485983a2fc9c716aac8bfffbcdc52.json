{"ast":null,"code":"import * as Types from '../constants/ActionType';\nimport { findIndex } from 'lodash';\nvar initialState = {\n  status: null,\n  calling: null\n};\n\nvar calling = function calling() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case Types.FETCH_CALLING:\n      // if (action.calling.status){\n      //     console.log(action.calling);\n      //     state = {\n      //         status: action.calling.status, \n      //         calling: action.calling.data\n      //     }\n      // }\n      console.log(action);\n      return state;\n\n    case Types.DELETE_CALLING:\n      var index = findIndex(state.calling, {\n        id: action.id\n      });\n\n      if (index !== -1) {\n        state.calling.splice(index, 1);\n      }\n\n      state = {\n        status: false,\n        calling: state.calling\n      };\n      return state;\n    // case Types.ADD_calling: \n    //     state = { \n    //         status: action.user.status, \n    //         calling: action.user,\n    //         preUser: !action.user.status ? action.userOld : null\n    //     };\n    //     return state;\n    // case Types.UPDATE_calling:\n    //     let {id} = action.user.user; \n    //     index = findIndex(state.calling, { id: id });\n    //     if (index !== -1) {\n    //         state.calling[index] = action.user.user;\n    //     }\n    //     state = {\n    //         status: action.user.status,\n    //         calling: action.user\n    //     }\n    //     return state;\n    // case Types.GET_USER: \n    //     if (action.user){\n    //         state = {\n    //             userEdit: action.user\n    //         }\n    //     }\n    //     return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default calling;","map":{"version":3,"sources":["/Volumes/Data/React/react-api/src/reducers/calling.js"],"names":["Types","findIndex","initialState","status","calling","state","action","type","FETCH_CALLING","console","log","DELETE_CALLING","index","id","splice"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,yBAAvB;AACA,SAAQC,SAAR,QAAwB,QAAxB;AACA,IAAIC,YAAY,GAAG;AAAEC,EAAAA,MAAM,EAAE,IAAV;AAAgBC,EAAAA,OAAO,EAAE;AAAzB,CAAnB;;AAEA,IAAMA,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AAE9C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKP,KAAK,CAACQ,aAAX;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACA,aAAOD,KAAP;;AACJ,SAAKL,KAAK,CAACW,cAAX;AACI,UAAIC,KAAK,GAAGX,SAAS,CAACI,KAAK,CAACD,OAAP,EAAgB;AAAES,QAAAA,EAAE,EAAEP,MAAM,CAACO;AAAb,OAAhB,CAArB;;AACA,UAAID,KAAK,KAAK,CAAC,CAAf,EAAkB;AAC1BP,QAAAA,KAAK,CAACD,OAAN,CAAcU,MAAd,CAAqBF,KAArB,EAA4B,CAA5B;AACS;;AACDP,MAAAA,KAAK,GAAG;AACJF,QAAAA,MAAM,EAAE,KADJ;AAEJC,QAAAA,OAAO,EAAEC,KAAK,CAACD;AAFX,OAAR;AAIA,aAAOC,KAAP;AACJ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACI,aAAOA,KAAP;AAjDR;AAmDH,CArDD;;AAuDA,eAAeD,OAAf","sourcesContent":["import * as Types from '../constants/ActionType';\nimport {findIndex} from 'lodash';\nvar initialState = { status: null, calling: null };\n\nconst calling = (state = initialState, action) => {\n   \n    switch(action.type){\n        case Types.FETCH_CALLING:\n            // if (action.calling.status){\n            //     console.log(action.calling);\n            //     state = {\n            //         status: action.calling.status, \n            //         calling: action.calling.data\n            //     }\n            // }\n            console.log(action);\n            return state;\n        case Types.DELETE_CALLING:\n            var index = findIndex(state.calling, { id: action.id });\n            if (index !== -1) {\n\t\t\t\tstate.calling.splice(index, 1);\n            }\n            state = {\n                status: false,\n                calling: state.calling\n            }\n            return state;\n        // case Types.ADD_calling: \n            \n        //     state = { \n        //         status: action.user.status, \n        //         calling: action.user,\n        //         preUser: !action.user.status ? action.userOld : null\n        //     };\n        //     return state;\n        // case Types.UPDATE_calling:\n \n        //     let {id} = action.user.user; \n        //     index = findIndex(state.calling, { id: id });\n        //     if (index !== -1) {\n        //         state.calling[index] = action.user.user;\n        //     }\n        //     state = {\n        //         status: action.user.status,\n        //         calling: action.user\n        //     }\n        //     return state;\n        // case Types.GET_USER: \n        //     if (action.user){\n        //         state = {\n        //             userEdit: action.user\n        //         }\n        //     }\n        //     return state;\n        default: \n            return state;\n    }\n}\n\nexport default calling;"]},"metadata":{},"sourceType":"module"}