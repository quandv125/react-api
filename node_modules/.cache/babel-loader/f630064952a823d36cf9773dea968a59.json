{"ast":null,"code":"import _objectSpread from \"/Volumes/Data/React/react-api/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as Types from '../constants/ActionType';\nimport { findIndex } from 'lodash';\nvar initialState = {\n  status: null,\n  customers: null\n};\n\nvar customers = function customers() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case Types.FETCH_CUSTOMERS:\n      if (action.customers.status) {\n        state = {\n          status: action.customers.status,\n          customers: action.customers.data\n        };\n      }\n\n      return state;\n\n    case Types.DELETE_CUSTOMERS:\n      var index = findIndex(state.customers, {\n        id: action.id\n      });\n\n      if (index !== -1) {\n        state.customers.splice(index, 1);\n      }\n\n      state = {\n        status: false,\n        customers: state.customers\n      };\n      return state;\n    // case Types.ADD_CUSTOMERS: \n    //     state = { \n    //         status: action.user.status, \n    //         customers: action.user,\n    //         preUser: !action.user.status ? action.userOld : null\n    //     };\n    //     return state;\n\n    case Types.UPDATE_CUSTOMERS:\n      action.data['id'] = 123;\n      console.log(action.data);\n      var id = action.id;\n      index = findIndex(state.customers, {\n        id: id\n      });\n\n      if (index !== -1) {\n        state.customers[index] = action.data;\n      }\n\n      return _objectSpread({}, state);\n    // case Types.GET_USER: \n    //     if (action.user){\n    //         state = {\n    //             userEdit: action.user\n    //         }\n    //     }\n    //     return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default customers;","map":{"version":3,"sources":["/Volumes/Data/React/react-api/src/reducers/customers.js"],"names":["Types","findIndex","initialState","status","customers","state","action","type","FETCH_CUSTOMERS","data","DELETE_CUSTOMERS","index","id","splice","UPDATE_CUSTOMERS","console","log"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,yBAAvB;AACA,SAAQC,SAAR,QAAwB,QAAxB;AACA,IAAIC,YAAY,GAAG;AAAEC,EAAAA,MAAM,EAAE,IAAV;AAAgBC,EAAAA,SAAS,EAAE;AAA3B,CAAnB;;AAEA,IAAMA,SAAS,GAAG,SAAZA,SAAY,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AAEhD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKP,KAAK,CAACQ,eAAX;AACI,UAAIF,MAAM,CAACF,SAAP,CAAiBD,MAArB,EAA4B;AACxBE,QAAAA,KAAK,GAAG;AACJF,UAAAA,MAAM,EAAEG,MAAM,CAACF,SAAP,CAAiBD,MADrB;AAEJC,UAAAA,SAAS,EAAEE,MAAM,CAACF,SAAP,CAAiBK;AAFxB,SAAR;AAIH;;AACD,aAAOJ,KAAP;;AACJ,SAAKL,KAAK,CAACU,gBAAX;AACI,UAAIC,KAAK,GAAGV,SAAS,CAACI,KAAK,CAACD,SAAP,EAAkB;AAAEQ,QAAAA,EAAE,EAAEN,MAAM,CAACM;AAAb,OAAlB,CAArB;;AACA,UAAID,KAAK,KAAK,CAAC,CAAf,EAAkB;AAC1BN,QAAAA,KAAK,CAACD,SAAN,CAAgBS,MAAhB,CAAuBF,KAAvB,EAA8B,CAA9B;AACS;;AACDN,MAAAA,KAAK,GAAG;AACJF,QAAAA,MAAM,EAAE,KADJ;AAEJC,QAAAA,SAAS,EAAEC,KAAK,CAACD;AAFb,OAAR;AAIA,aAAOC,KAAP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAKL,KAAK,CAACc,gBAAX;AACIR,MAAAA,MAAM,CAACG,IAAP,CAAY,IAAZ,IAAoB,GAApB;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYV,MAAM,CAACG,IAAnB;AAFJ,UAGSG,EAHT,GAGeN,MAHf,CAGSM,EAHT;AAIID,MAAAA,KAAK,GAAGV,SAAS,CAACI,KAAK,CAACD,SAAP,EAAkB;AAAEQ,QAAAA,EAAE,EAAEA;AAAN,OAAlB,CAAjB;;AACA,UAAID,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdN,QAAAA,KAAK,CAACD,SAAN,CAAgBO,KAAhB,IAAyBL,MAAM,CAACG,IAAhC;AACH;;AAED,+BAAWJ,KAAX;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACI,aAAOA,KAAP;AA5CR;AA8CH,CAhDD;;AAkDA,eAAeD,SAAf","sourcesContent":["import * as Types from '../constants/ActionType';\nimport {findIndex} from 'lodash';\nvar initialState = { status: null, customers: null };\n\nconst customers = (state = initialState, action) => {\n   \n    switch(action.type){\n        case Types.FETCH_CUSTOMERS:\n            if (action.customers.status){\n                state = {\n                    status: action.customers.status, \n                    customers: action.customers.data\n                }\n            }\n            return state;\n        case Types.DELETE_CUSTOMERS:\n            var index = findIndex(state.customers, { id: action.id });\n            if (index !== -1) {\n\t\t\t\tstate.customers.splice(index, 1);\n            }\n            state = {\n                status: false,\n                customers: state.customers\n            }\n            return state;\n        // case Types.ADD_CUSTOMERS: \n        //     state = { \n        //         status: action.user.status, \n        //         customers: action.user,\n        //         preUser: !action.user.status ? action.userOld : null\n        //     };\n        //     return state;\n        case Types.UPDATE_CUSTOMERS:\n            action.data['id'] = 123;\n            console.log(action.data);\n            let {id} = action; \n            index = findIndex(state.customers, { id: id });\n            if (index !== -1) {\n                state.customers[index] = action.data;\n            }\n            \n            return {...state};\n        // case Types.GET_USER: \n        //     if (action.user){\n        //         state = {\n        //             userEdit: action.user\n        //         }\n        //     }\n        //     return state;\n        default: \n            return state;\n    }\n}\n\nexport default customers;"]},"metadata":{},"sourceType":"module"}