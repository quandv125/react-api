{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _utils = require('./utils');\n\nvar _Button = require('./Button');\n\nvar _Button2 = _interopRequireDefault(_Button);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defaults(obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);\n}\n\nvar ENTER = 13;\nvar ESC = 27;\n\nvar ToastrConfirm = function (_React$Component) {\n  _inherits(ToastrConfirm, _React$Component);\n\n  function ToastrConfirm(props) {\n    _classCallCheck(this, ToastrConfirm);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    var _this$props = _this.props,\n        confirmOptions = _this$props.confirmOptions,\n        confirm = _this$props.confirm;\n    var _confirm$options = confirm.options,\n        okText = _confirm$options.okText,\n        cancelText = _confirm$options.cancelText,\n        transitionIn = _confirm$options.transitionIn,\n        transitionOut = _confirm$options.transitionOut,\n        disableCancel = _confirm$options.disableCancel;\n    _this.okText = okText || confirmOptions.okText;\n    _this.cancelText = cancelText || confirmOptions.cancelText;\n    _this.transitionIn = transitionIn || confirmOptions.transitionIn || props.transitionIn;\n    _this.transitionOut = transitionOut || confirmOptions.transitionOut || props.transitionOut;\n    _this.disableCancel = disableCancel || confirmOptions.disableCancel;\n    (0, _utils._bind)('setTransition removeConfirm handleOnKeyUp handleOnKeyDown', _this);\n    _this.isKeyDown = false;\n    return _this;\n  }\n\n  ToastrConfirm.prototype.componentDidMount = function componentDidMount() {\n    this.isHiding = false;\n    this.hasClicked = false;\n    this.confirmHolderElement.focus();\n\n    if (this.props.confirm.show) {\n      this.setTransition(true);\n    }\n  };\n\n  ToastrConfirm.prototype.handleOnKeyDown = function handleOnKeyDown(e) {\n    if ((0, _utils.keyCode)(e) == ENTER) {\n      e.preventDefault();\n    }\n\n    this.isKeyDown = true;\n  };\n\n  ToastrConfirm.prototype.handleButtonClick = function handleButtonClick(callback) {\n    var _this2 = this;\n\n    if (this.hasClicked) return;\n    this.hasClicked = true;\n\n    var onAnimationEnd = function onAnimationEnd() {\n      _this2.removeConfirm();\n\n      if (callback) {\n        callback();\n      }\n    };\n\n    this.setTransition();\n    (0, _utils.onCSSTransitionEnd)(this.confirmElement, onAnimationEnd);\n  };\n\n  ToastrConfirm.prototype.handleConfirmClick = function handleConfirmClick() {\n    var callback = this.props.confirm.options ? this.props.confirm.options.onOk : null;\n    this.handleButtonClick(callback);\n  };\n\n  ToastrConfirm.prototype.handleCancelClick = function handleCancelClick() {\n    var callback = this.props.confirm.options ? this.props.confirm.options.onCancel : null;\n    this.handleButtonClick(callback);\n  };\n\n  ToastrConfirm.prototype.setTransition = function setTransition(add) {\n    if (add) {\n      this.isHiding = false;\n      this.confirmElement.classList.add(this.transitionIn);\n      if ((0, _utils.isBrowser)()) return document.querySelector('body').classList.add('toastr-confirm-active');\n    }\n\n    this.isHiding = true;\n    this.confirmElement.classList.remove(this.transitionIn);\n    this.confirmElement.classList.add(this.transitionOut);\n  };\n\n  ToastrConfirm.prototype.removeConfirm = function removeConfirm() {\n    this.isHiding = false;\n    this.props.hideConfirm();\n    if ((0, _utils.isBrowser)()) return document.querySelector('body').classList.remove('toastr-confirm-active');\n  };\n\n  ToastrConfirm.prototype.handleOnKeyUp = function handleOnKeyUp(e) {\n    var code = (0, _utils.keyCode)(e);\n\n    if (code == ESC && !this.disableCancel) {\n      this.handleCancelClick();\n    } else if (code == ESC && this.disableCancel) {\n      this.handleConfirmClick();\n    } else if (code == ENTER && this.isKeyDown) {\n      this.isKeyDown = false;\n      this.handleConfirmClick();\n    }\n  };\n\n  ToastrConfirm.prototype.containsOkButton = function containsOkButton(buttons) {\n    return buttons && buttons.filter(function (button) {\n      return button.ok === true;\n    }).length > 0;\n  };\n\n  ToastrConfirm.prototype.containsCancelButton = function containsCancelButton(buttons) {\n    return buttons && buttons.filter(function (button) {\n      return button.cancel === true;\n    }).length > 0;\n  };\n\n  ToastrConfirm.prototype.getCustomButtonHandler = function getCustomButtonHandler(config) {\n    var _this3 = this;\n\n    if (config.ok === true) {\n      return this.handleConfirmClick.bind(this);\n    }\n\n    if (config.cancel === true) {\n      return this.handleCancelClick.bind(this);\n    }\n\n    return function () {\n      return _this3.handleButtonClick(config.handler);\n    };\n  };\n\n  ToastrConfirm.prototype.getCustomButtonText = function getCustomButtonText(config) {\n    if (config.ok === true) {\n      return this.okText;\n    }\n\n    if (config.cancel === true) {\n      return this.cancelText;\n    }\n\n    return config.text;\n  };\n\n  ToastrConfirm.prototype.getCustomButtonClassName = function getCustomButtonClassName(config) {\n    if (config.ok === true) {\n      return 'rrt-ok-btn';\n    }\n\n    if (config.cancel === true) {\n      return 'rrt-cancel-btn';\n    }\n\n    return config.className;\n  };\n\n  ToastrConfirm.prototype.render = function render() {\n    var _this4 = this;\n\n    var _props$confirm = this.props.confirm,\n        options = _props$confirm.options,\n        message = _props$confirm.message;\n    return _react2.default.createElement('div', {\n      className: 'rrt-confirm-holder',\n      tabIndex: '-1',\n      ref: function ref(_ref2) {\n        return _this4.confirmHolderElement = _ref2;\n      },\n      onKeyDown: this.handleOnKeyDown,\n      onKeyUp: this.handleOnKeyUp,\n      role: 'alert'\n    }, _react2.default.createElement('div', {\n      className: 'rrt-confirm animated',\n      ref: function ref(_ref) {\n        return _this4.confirmElement = _ref;\n      }\n    }, message && _react2.default.createElement('div', {\n      className: 'rrt-message'\n    }, message), options.component && _react2.default.createElement(options.component, null), _react2.default.createElement('div', {\n      className: 'rrt-buttons-holder'\n    }, !this.containsOkButton(options.buttons) && _react2.default.createElement(_Button2.default, {\n      className: 'rrt-ok-btn',\n      onClick: function onClick() {\n        return _this4.handleConfirmClick();\n      }\n    }, this.okText), !this.disableCancel && !this.containsCancelButton(options.buttons) && _react2.default.createElement(_Button2.default, {\n      className: 'rrt-cancel-btn',\n      onClick: this.handleCancelClick.bind(this)\n    }, this.cancelText), options.buttons && options.buttons.map(function (button, index) {\n      if (button.cancel === true && _this4.disableCancel) {\n        return null;\n      }\n\n      var handler = _this4.getCustomButtonHandler(button);\n\n      var text = _this4.getCustomButtonText(button);\n\n      var className = _this4.getCustomButtonClassName(button);\n\n      return _react2.default.createElement(_Button2.default, {\n        className: className,\n        onClick: handler,\n        key: index\n      }, text);\n    }))), _react2.default.createElement('div', {\n      className: 'shadow'\n    }));\n  };\n\n  return ToastrConfirm;\n}(_react2.default.Component);\n\nToastrConfirm.displayName = 'ToastrConfirm';\nToastrConfirm.propTypes = {\n  confirm: _propTypes2.default.shape({\n    options: _propTypes2.default.shape({\n      transitionIn: _propTypes2.default.string,\n      transitionOut: _propTypes2.default.string\n    })\n  })\n};\nexports.default = ToastrConfirm;","map":null,"metadata":{},"sourceType":"script"}