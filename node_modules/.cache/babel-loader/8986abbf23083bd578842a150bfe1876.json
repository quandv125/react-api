{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _filter = require('./filter');\n\nvar _comparison = require('./comparison');\n\nvar _const = require('./const');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint no-param-reassign: 0 */\n\n\nexports.default = function (Base, _ref) {\n  var _class, _temp;\n\n  var _ = _ref._,\n      remoteResolver = _ref.remoteResolver;\n  return _temp = _class = function (_remoteResolver) {\n    _inherits(FilterWrapper, _remoteResolver);\n\n    function FilterWrapper(props) {\n      _classCallCheck(this, FilterWrapper);\n\n      var _this = _possibleConstructorReturn(this, (FilterWrapper.__proto__ || Object.getPrototypeOf(FilterWrapper)).call(this, props));\n\n      _this.state = {\n        currFilters: {},\n        isDataChanged: props.isDataChanged || false\n      };\n      _this.onFilter = _this.onFilter.bind(_this);\n      _this.onExternalFilter = _this.onExternalFilter.bind(_this);\n      return _this;\n    }\n\n    _createClass(FilterWrapper, [{\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(_ref2) {\n        var isDataChanged = _ref2.isDataChanged,\n            store = _ref2.store,\n            columns = _ref2.columns; // consider to use lodash.isEqual\n\n        var isRemoteFilter = this.isRemoteFiltering() || this.isRemotePagination();\n\n        if (isRemoteFilter || JSON.stringify(this.state.currFilters) !== JSON.stringify(store.filters)) {\n          // I think this condition only isRemoteFilter is enough\n          store.filteredData = store.getAllData();\n          this.setState(function () {\n            return {\n              isDataChanged: true,\n              currFilters: store.filters\n            };\n          });\n        } else {\n          if (Object.keys(this.state.currFilters).length > 0) {\n            store.filteredData = (0, _filter.filters)(store, columns, _)(this.state.currFilters);\n          }\n\n          this.setState(function () {\n            return {\n              isDataChanged: isDataChanged\n            };\n          });\n        }\n      }\n      /**\n       * filter the table like below:\n       * onFilter(column, filterType)(filterVal)\n       * @param {Object} column\n       * @param {String} filterType\n       * @param {String} filterVal - user input for filtering.\n       */\n\n    }, {\n      key: 'onFilter',\n      value: function onFilter(column, filterType) {\n        var _this2 = this;\n\n        return function (filterVal) {\n          var _props = _this2.props,\n              store = _props.store,\n              columns = _props.columns; // watch out here if migration to context API, #334\n\n          var currFilters = Object.assign({}, store.filters);\n          var dataField = column.dataField,\n              filter = column.filter;\n          var needClearFilters = !_.isDefined(filterVal) || filterVal === '' || filterVal.length === 0;\n\n          if (needClearFilters) {\n            delete currFilters[dataField];\n          } else {\n            // select default comparator is EQ, others are LIKE\n            var _filter$props = filter.props,\n                _filter$props$compara = _filter$props.comparator,\n                comparator = _filter$props$compara === undefined ? filterType === _const.FILTER_TYPE.SELECT || filterType === _const.FILTER_TYPE.MULTISELECT ? _comparison.EQ : _comparison.LIKE : _filter$props$compara,\n                _filter$props$caseSen = _filter$props.caseSensitive,\n                caseSensitive = _filter$props$caseSen === undefined ? false : _filter$props$caseSen;\n            currFilters[dataField] = {\n              filterVal: filterVal,\n              filterType: filterType,\n              comparator: comparator,\n              caseSensitive: caseSensitive\n            };\n          }\n\n          store.filters = currFilters;\n\n          if (_this2.isRemoteFiltering() || _this2.isRemotePagination()) {\n            _this2.handleRemoteFilterChange(); // when remote filtering is enable, dont set currFilters state\n            // in the componentWillReceiveProps,\n            // it's the key point that we can know the filter is changed\n\n\n            return;\n          }\n\n          store.filteredData = (0, _filter.filters)(store, columns, _)(currFilters);\n\n          _this2.setState(function () {\n            return {\n              currFilters: currFilters,\n              isDataChanged: true\n            };\n          });\n        };\n      }\n    }, {\n      key: 'onExternalFilter',\n      value: function onExternalFilter(column, filterType) {\n        var _this3 = this;\n\n        return function (value) {\n          _this3.onFilter(column, filterType)(value);\n        };\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        return _react2.default.createElement(Base, _extends({}, this.props, {\n          data: this.props.store.data,\n          onFilter: this.onFilter,\n          onExternalFilter: this.onExternalFilter,\n          isDataChanged: this.state.isDataChanged\n        }));\n      }\n    }]);\n\n    return FilterWrapper;\n  }(remoteResolver(_react.Component)), _class.propTypes = {\n    store: _propTypes2.default.object.isRequired,\n    columns: _propTypes2.default.array.isRequired\n  }, _temp;\n};","map":null,"metadata":{},"sourceType":"script"}