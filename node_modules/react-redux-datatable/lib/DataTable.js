'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactBootstrapTableNext = require('react-bootstrap-table-next');

var _reactBootstrapTableNext2 = _interopRequireDefault(_reactBootstrapTableNext);

var _reactBootstrapTable2Paginator = require('react-bootstrap-table2-paginator');

var _reactBootstrapTable2Paginator2 = _interopRequireDefault(_reactBootstrapTable2Paginator);

var _reactBootstrapTable2Filter = require('react-bootstrap-table2-filter');

var _reactBootstrapTable2Filter2 = _interopRequireDefault(_reactBootstrapTable2Filter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DataTable = function (_React$Component) {
    _inherits(DataTable, _React$Component);

    function DataTable(props) {
        _classCallCheck(this, DataTable);

        var _this = _possibleConstructorReturn(this, (DataTable.__proto__ || Object.getPrototypeOf(DataTable)).call(this, props));

        _this.menuButtonClass = function () {
            return {
                className: 'table-button table-button-menu-item'
            };
        };

        _this.startClearingAllFilters = function () {
            _this.props.startClearingFilters();
            _this.setState({
                clearFilters: true
            });
        };

        _this.clearAllFilters = function () {
            Object.values(_this.props.tableColumns).filter(function (filter) {
                return filter.column.searchable !== false;
            }).forEach(function (filter) {
                filter.resetDefault();
                _this.colRef[filter.column.key](filter.getDefault());
            });
            _this.setState({
                clearFilters: false
            });
            _this.props.clearFilters();
        };

        _this.toggleFilters = function () {
            _this.setState({
                showFilters: !_this.state.showFilters
            });
        };

        _this.renderExportCSVButton = function () {
            return _react2.default.createElement(
                'div',
                _extends({}, _this.menuButtonClass(), {
                    onClick: function onClick() {
                        return _this.props.onExportToCSV();
                    }
                }),
                _react2.default.createElement(
                    'span',
                    { className: 'export-icon' },
                    _react2.default.createElement('b', null)
                ),
                'Export'
            );
        };

        _this.renderCustomButtonGroup = function () {
            var filtersType = 'hidden';
            if (_this.state.showFilters) {
                if (_this.props.isFiltered) {
                    filtersType = 'filtered';
                } else {
                    filtersType = 'shown';
                }
            }
            return _react2.default.createElement(
                'div',
                { className: 'table-button-menu' },
                _react2.default.createElement(
                    'button',
                    _extends({}, _this.menuButtonClass(), {
                        onClick: function onClick() {
                            return _this.props.refreshTable();
                        }
                    }),
                    _react2.default.createElement(
                        'span',
                        { className: 'refresh-icon' },
                        _react2.default.createElement('b', null)
                    )
                ),
                filtersType === 'shown' && _react2.default.createElement(
                    'button',
                    _extends({}, _this.menuButtonClass(), {
                        onClick: function onClick() {
                            return _this.toggleFilters();
                        }
                    }),
                    _react2.default.createElement(
                        'span',
                        { className: 'filter-icon filter-icon-shown' },
                        _react2.default.createElement('b', null)
                    ),
                    'Filter'
                ),
                filtersType === 'filtered' && _react2.default.createElement(
                    'button',
                    _extends({}, _this.menuButtonClass(), {
                        onClick: function onClick() {
                            return _this.startClearingAllFilters();
                        }
                    }),
                    _react2.default.createElement(
                        'span',
                        { className: 'filter-icon filter-icon-clear' },
                        _react2.default.createElement('b', null)
                    ),
                    'Clear Filters'
                ),
                filtersType === 'hidden' && _react2.default.createElement(
                    'button',
                    _extends({}, _this.menuButtonClass(), {
                        onClick: function onClick() {
                            return _this.toggleFilters();
                        }
                    }),
                    _react2.default.createElement(
                        'span',
                        { className: 'filter-icon' },
                        _react2.default.createElement('b', null)
                    ),
                    'Filter'
                ),
                _this.renderExportCSVButton(),
                _this.props.extraButtons && _this.props.extraButtons()
            );
        };

        _this.renderSearchBox = function () {
            return _react2.default.createElement(
                'div',
                { className: 'form-group form-group-sm react-bs-table-search-form' },
                _react2.default.createElement('input', {
                    type: 'text',
                    defaultValue: _this.props.searchValue,
                    placeholder: 'Search',
                    onChange: _this.props.onSearchChange
                }),
                _react2.default.createElement('span', { className: 'input-group-btn' })
            );
        };

        _this.renderToolBar = function () {
            return _react2.default.createElement(
                'div',
                { className: 'react-bs-table-tool-bar' },
                _react2.default.createElement(
                    'div',
                    { className: 'row' },
                    _react2.default.createElement(
                        'div',
                        { className: 'col-xs-6 col-sm-6 col-md-6 col-lg-8' },
                        _this.renderCustomButtonGroup()
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: 'col-xs-6 col-sm-6 col-md-6 col-lg-4' },
                        _this.renderSearchBox()
                    )
                )
            );
        };

        _this.renderShowsTotal = function (start, to, total) {
            return _react2.default.createElement(
                'div',
                { style: { float: 'right', fontSize: '10px', marginTop: '4px', marginRight: '-66px' } },
                'Showing ',
                start,
                ' to ',
                Math.max(to + 1, 0),
                ' of ',
                total,
                ' Results'
            );
        };

        _this.state = {
            showFilters: _this.props.isFiltered,
            clearFilters: false
        };
        _this.colRef = {};
        return _this;
    }

    _createClass(DataTable, [{
        key: 'componentWillUpdate',
        value: function componentWillUpdate(nextProps, nextState) {
            if (nextState.clearFilters) this.clearAllFilters();
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                keyField = _props.keyField,
                noDataIndication = _props.noDataIndication,
                defaultSort = _props.defaultSort,
                tableColumns = _props.tableColumns,
                tableData = _props.tableData,
                dataTotalSize = _props.dataTotalSize,
                onTableChange = _props.onTableChange,
                onSizePerPageChange = _props.onSizePerPageChange,
                currentPage = _props.currentPage,
                sizePerPage = _props.sizePerPage;

            // Add sort options

            var defaultSortOptions = null;
            if (defaultSort) {
                defaultSortOptions = [{
                    dataField: defaultSort[0],
                    order: defaultSort[1].toLowerCase()
                }];
            }

            // Add pagination options
            var paginationOptions = {
                paginationTotalRenderer: this.renderShowsTotal,
                showTotal: true,
                page: currentPage,
                sizePerPage: sizePerPage,
                sizePerPageList: [10, 25, 50, 100],
                onSizePerPageChange: onSizePerPageChange,
                totalSize: dataTotalSize
            };

            var columns = Object.values(tableColumns).map(function (tableColumn) {
                // set column filter, if searchable
                var columnFilter = void 0;
                var filterRenderer = void 0;
                if (tableColumn.column.searchable !== false) {
                    var defaultValue = tableColumn.getBaseDefault();
                    if (tableColumn.column.defaultValue) defaultValue = tableColumn.column.defaultValue;
                    var filterOptions = _extends({}, tableColumn.getColumnFilterProps(defaultValue), {
                        getFilter: function getFilter(c) {
                            _this2.colRef[tableColumn.column.key] = c;
                        }
                    });
                    if (filterOptions.type === 'TextFilter') {
                        columnFilter = (0, _reactBootstrapTable2Filter.textFilter)(filterOptions);
                    }
                    if (filterOptions.type === 'SelectFilter') {
                        columnFilter = (0, _reactBootstrapTable2Filter.selectFilter)(filterOptions);
                    }
                    if (filterOptions.type === 'NumberFilter') {
                        columnFilter = (0, _reactBootstrapTable2Filter.numberFilter)(filterOptions);
                    }
                    if (filterOptions.type === 'CustomFilter') {
                        columnFilter = (0, _reactBootstrapTable2Filter.customFilter)();
                        filterRenderer = function filterRenderer(onFilter) {
                            return tableColumn.getCustomFilter(onFilter, filterOptions);
                        };
                    }
                }
                return _extends({
                    dataField: tableColumn.column.key,
                    text: tableColumn.column.title,
                    sort: !(tableColumn.column.sortable === false),
                    filter: columnFilter
                }, filterRenderer && { filterRenderer: filterRenderer }, {
                    headerClasses: '' + (_this2.state.showFilters ? '' : 'hide-filter'),
                    hidden: tableColumn.column.hidden
                }, tableColumn.column.width && { headerStyle: { width: tableColumn.column.width.toString() + 'px' } }, tableColumn.column.width && { style: { width: tableColumn.column.width.toString() + 'px' } }, tableColumn.column.dataFormat && { formatter: tableColumn.column.dataFormat }, tableColumn.column.formatExtraData && { formatExtraData: tableColumn.column.formatExtraData });
            });

            return _react2.default.createElement(
                'div',
                { style: { position: 'relative' } },
                this.renderToolBar(),
                _react2.default.createElement(_reactBootstrapTableNext2.default, {
                    remote: { pagination: true },
                    keyField: keyField,
                    data: tableData || [],
                    columns: columns,
                    defaultSorted: defaultSortOptions,
                    striped: true,
                    hover: true,
                    pagination: (0, _reactBootstrapTable2Paginator2.default)(paginationOptions),
                    onTableChange: onTableChange,
                    noDataIndication: noDataIndication,
                    filter: (0, _reactBootstrapTable2Filter2.default)()
                })
            );
        }
    }]);

    return DataTable;
}(_react2.default.Component);

DataTable.propTypes = {
    keyField: _propTypes2.default.string.isRequired,
    noDataIndication: _propTypes2.default.any,
    extraButtons: _propTypes2.default.func,
    defaultSort: _propTypes2.default.array,
    tableColumns: _propTypes2.default.object.isRequired,
    tableData: _propTypes2.default.any,
    dataTotalSize: _propTypes2.default.number.isRequired,
    onTableChange: _propTypes2.default.func.isRequired,
    onSizePerPageChange: _propTypes2.default.func.isRequired,
    onSearchChange: _propTypes2.default.func.isRequired,
    onExportToCSV: _propTypes2.default.func.isRequired,
    currentPage: _propTypes2.default.number.isRequired,
    sizePerPage: _propTypes2.default.number.isRequired,
    refreshTable: _propTypes2.default.func.isRequired,
    searchValue: _propTypes2.default.string,
    startClearingFilters: _propTypes2.default.func.isRequired,
    clearFilters: _propTypes2.default.func.isRequired,
    isFiltered: _propTypes2.default.bool
};

DataTable.defaultProps = {
    noDataIndication: 'There is no data to display',
    extraButtons: null,
    defaultSort: null,
    tableData: null,
    searchValue: undefined,
    isFiltered: false
};

exports.default = DataTable;